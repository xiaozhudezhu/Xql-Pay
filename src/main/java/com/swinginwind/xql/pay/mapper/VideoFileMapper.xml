<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.swinginwind.xql.pay.mapper.VideoFileMapper" >
  <resultMap id="BaseResultMap" type="com.swinginwind.xql.pay.entity.VideoFile" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="pid" property="pid" jdbcType="INTEGER" />
    <result column="file_id" property="fileId" jdbcType="VARCHAR" />
    <result column="sort_code" property="sortCode" jdbcType="TINYINT" />
    <result column="free" property="free" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="create_user" property="createUser" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, name, remark, pid, file_id, sort_code, free, create_time, create_user
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from video_file
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from video_file
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.swinginwind.xql.pay.entity.VideoFile" keyProperty="id" useGeneratedKeys="true">
    insert into video_file (id, name, remark, 
      pid, file_id, sort_code, free, 
      create_time, create_user)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR}, 
      #{pid,jdbcType=INTEGER}, #{fileId,jdbcType=VARCHAR}, #{sortCode,jdbcType=TINYINT}, #{free,jdbcType=VARCHAR},
      #{createTime,jdbcType=TIMESTAMP}, #{createUser,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.swinginwind.xql.pay.entity.VideoFile" >
    insert into video_file
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="pid != null" >
        pid,
      </if>
      <if test="fileId != null" >
        file_id,
      </if>
      <if test="sortCode != null" >
        sort_code,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="createUser != null" >
        create_user,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="pid != null" >
        #{pid,jdbcType=INTEGER},
      </if>
      <if test="fileId != null" >
        #{fileId,jdbcType=VARCHAR},
      </if>
      <if test="sortCode != null" >
        #{sortCode,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null" >
        #{createUser,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.swinginwind.xql.pay.entity.VideoFile" >
    update video_file
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="pid != null" >
        pid = #{pid,jdbcType=INTEGER},
      </if>
      <if test="fileId != null" >
        file_id = #{fileId,jdbcType=VARCHAR},
      </if>
      <if test="sortCode != null" >
        sort_code = #{sortCode,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null" >
        create_user = #{createUser,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.swinginwind.xql.pay.entity.VideoFile" >
    update video_file
    set name = #{name,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR},
      pid = #{pid,jdbcType=INTEGER},
      file_id = #{fileId,jdbcType=VARCHAR},
      sort_code = #{sortCode,jdbcType=TINYINT},
      free = #{free,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_user = #{createUser,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByPid" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from video_file
    where pid = #{pid,jdbcType=INTEGER} order by sort_code
  </select>
  <select id="selectByPidPermitted" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    SELECT
	t1.*, (
		CASE
		WHEN t1.free = '1'
		THEN
			'2'
		WHEN t3.video_id IS NOT NULL
		THEN
			'1' 
		ELSE
			'0'
		END
	) permitted
FROM
	video_file t1
LEFT JOIN (
	SELECT
		video_id
	FROM
		video_permission t2
	WHERE
		t2.user_id = #{userId}
	AND (
		t2.due_date > sysdate()
		OR t2.due_date IS NULL
	)
	AND (
		t2.start_date > sysDate()
		OR t2.start_date IS NULL
	)
) t3 ON t1.id = t3.video_id
    where t1.pid = #{pid,jdbcType=INTEGER} order by t1.sort_code
  </select>
  <select id="isVideoFilePermitted" resultType="string" parameterType="java.lang.Integer" >
  	select '1' from video_file t1 where t1.id = #{id} and (t1.free = '1' or exists (SELECT
		video_id
	FROM
		video_permission t2
	WHERE
		t2.user_id = #{userId}
	AND t2.video_id = t1.id
	AND (
		t2.due_date > sysdate()
		OR t2.due_date IS NULL
	)
	AND (
		t2.start_date > sysDate()
		OR t2.start_date IS NULL
	)))
  </select>
  <select id="selectVideoTree" resultType="map" >
    (SELECT
	concat('T', id) AS id,
	name,
	concat('T', pid) AS pId,
	'T' AS type
	FROM
		video_type order by sort_code)
	UNION ALL
	(SELECT
		id,
		name,
		concat('T', pid) AS pId,
		'F' AS type
	FROM
		video_file order by sort_code)
  </select>
</mapper>